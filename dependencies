<dependency> <groupId>javax.annotation</groupId> <artifactId>javax.annotation-api</artifactId> <version>1.3.2</version> </dependency>


https://docs.spring.io/spring-framework/docs/4.3.15.RELEASE/spring-framework-reference/html/aop.html


// MVC Dependency

 <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>5.3.34</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>4.0.1</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>jstl</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>




<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <mvc:annotation-driven/>

    <context:component-scan base-package="com."/>


    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
</beans>


// Web.xml
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>


// REST
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.SpringMVCREST</groupId>
  <artifactId>SpringMVCREST</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>SpringMVCREST Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>5.3.34</version>
    </dependency>

    <!-- JDBC -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>5.3.34</version>
    </dependency>

    <!-- MySQL Connector -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.33</version>
    </dependency>

    <!-- JSTL (Optional if JSP used) -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
  </dependencies>
  <build>
    <finalName>SpringMVCREST</finalName>
  </build>
</project>


//Database

CREATE DATABASE restdb;

USE restdb;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100)
);



//mongo Aggregator


db.customers.insertMany([
  { _id: "C001", name: "Alice", tier: "Gold",   city: "Delhi"  },
  { _id: "C002", name: "Bob",   tier: "Silver", city: "Mumbai" },
  { _id: "C003", name: "Carol", tier: "Gold",   city: "Pune"   }
]);

// 3) Orders (note: each has a date)

db.orders.insertMany([
  {
    _id: "O1001",
    customerId: "C001",
    orderDate: ISODate("2025-06-02T10:12:00Z"),
    items: [
      { sku: "P01", name: "Laptop", qty: 1, price: 85000 },
      { sku: "P02", name: "Mouse",  qty: 2, price:  800 }
    ],
    status: "DELIVERED"
  },
  {
    _id: "O1002",
    customerId: "C002",
    orderDate: ISODate("2025-06-15T15:30:00Z"),
    items: [
      { sku: "P03", name: "Phone",  qty: 1, price: 45000 },
      { sku: "P04", name: "Cover",  qty: 1, price:  600 }
    ],
    status: "DELIVERED"
  },
  {
    _id: "O1003",
    customerId: "C001",
    orderDate: ISODate("2025-06-28T08:45:00Z"),
    items: [
      { sku: "P05", name: "Monitor", qty: 2, price: 12000 }
    ],
    status: "SHIPPED"
  },
  {
    _id: "O1004",
    customerId: "C003",
    orderDate: ISODate("2025-07-03T09:05:00Z"),
    items: [
      { sku: "P06", name: "Keyboard", qty: 1, price: 2500 }
    ],
    status: "DELIVERED"
  }
]);

// (Optional) Helpful indexes for filters/joins
db.orders.createIndex({ orderDate: 1 });
db.orders.createIndex({ customerId: 1 });


// Revenue by customer
db.orders.aggregate([
  { $match: { orderDate: { $gte: ISODate("2025-06-01T00:00:00Z"), $lt: ISODate("2025-07-01T00:00:00Z") } } },
  { $addFields: {
      orderTotal: {
        $sum: {
          $map: {
            input: "$items",
            as: "i",
            in: { $multiply: ["$$i.qty", "$$i.price"] }
          }
        }
      }
    }
  },
  { $group: {
      _id: "$customerId",
      orders: { $sum: 1 },
      revenue: { $sum: "$orderTotal" }
    }
  },
  { $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer"
    }
  },
  { $unwind: "$customer" },
  { $project: {
      _id: 0,
      customer: "$customer.name",
      city: "$customer.city",
      tier: "$customer.tier",
      orders: 1,
      revenue: 1
    }
  },
  { $sort: { revenue: -1 } }
]);



//kafka:

 Start ZooKeeper
.\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties
Start Kafka Broker
.\bin\windows\kafka-server-start.bat .\config\server.properties
Create a Topic
.\bin\windows\kafka-topics.bat --create --topic demo-topic --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
Test with Console Producer
.\bin\windows\kafka-console-producer.bat --topic demo-topic --bootstrap-server localhost:9092
Test with Console Consumer
.\bin\windows\kafka-console-consumer.bat --topic demo-topic --from-beginning --bootstrap-server localhost:9092



